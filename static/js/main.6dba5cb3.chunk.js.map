{"version":3,"sources":["reportWebVitals.js","Square.js","Board.js","Game.js","Window.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Square","props","className","inWinLine","onClick","value","Board","Array","size","keys","map","i","j","squares","winLine","includes","renderSquare","Game","status","useState","fill","location","col","row","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isASC","setIsASC","current","win","calculateWinner","winner","moves","el","move","desc","step","line","_history","slice","length","concat","Math","floor","handleClick","disabled","reverse","sqrt","lines","horizontal","vertical","push","cross","role","every","num","Window","_size","input","setInput","setSize","type","placeholder","onChange","e","target","required","Number","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dba5cb3.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./global.css\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button\r\n      className={`square ${props.inWinLine ? \"highlight\" : \"\"}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import Square from \"./Square\";\r\nimport \"./global.css\";\r\n\r\nfunction Board(props) {\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={props.squares[i]}\r\n        inWinLine={props.winLine.includes(i)}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      {[...Array(props.size).keys()].map((i) => {\r\n        return (\r\n          <div className=\"board-row\" key={i}>\r\n            {[...Array(props.size).keys()].map((j) => {\r\n              return renderSquare(i * props.size + j);\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./global.css\";\r\n\r\nfunction Game(props) {\r\n  const size = props.size\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(props.size ** 2).fill(null),\r\n      location: {\r\n        col: null,\r\n        row: null,\r\n      },\r\n    },\r\n  ]);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [isASC, setIsASC] = useState(true);\r\n\r\n  function handleClick(i) {\r\n    const _history = history.slice(0, stepNumber + 1);\r\n    const current = _history[_history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      _history.concat([\r\n        {\r\n          squares: squares,\r\n          location: {\r\n            col: i % size,\r\n            row: Math.floor(i / size),\r\n          },\r\n        },\r\n      ])\r\n    );\r\n    setXIsNext(!xIsNext);\r\n    setStepNumber(_history.length);\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setXIsNext(step % 2 === 0);\r\n    setStepNumber(step);\r\n  }\r\n\r\n  const current = history[stepNumber];\r\n  const win = calculateWinner(current.squares);\r\n\r\n  let status;\r\n  if (win?.winner) {\r\n    status = \"Winner: \" + win.winner;\r\n  } else if (stepNumber < size ** 2) {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  } else {\r\n    status = \"Draw game: no one become winner\";\r\n  }\r\n\r\n  const moves = history.map((el, move) => {\r\n    const desc = move\r\n      ? `Go to move # ${move}: Choice at (${el.location.col}, ${el.location.row}) `\r\n      : \"Go to game start\";\r\n    return (\r\n      <li key={move}>\r\n        <button\r\n          className={stepNumber === move ? \"bold\" : \"\"}\r\n          onClick={() => jumpTo(move)}\r\n        >\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          size={size}\r\n          squares={current.squares}\r\n          winLine={win ? win.line : []}\r\n          onClick={(i) => handleClick(i)}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div className={'bold'}>{status}</div>\r\n        <button onClick={() => {setIsASC(true)}} disabled={isASC}>Ascending order</button>\r\n        <button onClick={() => {setIsASC(false)}} disabled={!isASC}>Descending order</button>\r\n        <ol>{isASC ? moves : moves.reverse()}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n\r\nfunction calculateWinner(squares) {\r\n  const size = Math.sqrt(squares.length);\r\n\r\n  // Check all lines to calculate winner\r\n  const lines = [];\r\n  for (let i = 0; i < size; i++) {\r\n    const horizontal = [];\r\n    const vertical = [];\r\n    for (let j = 0; j < size; j++) {\r\n      horizontal.push(i * size + j);\r\n      vertical.push(i + j * size);\r\n    }\r\n    lines.push(horizontal);\r\n    lines.push(vertical);\r\n  }\r\n  const cross = [];\r\n  const reverse = [];\r\n  for (let i = 0; i < size; i++) {\r\n    cross.push(i * size + i);\r\n    reverse.push((i + 1) * size - (i + 1));\r\n  }\r\n  lines.push(cross);\r\n  lines.push(reverse);\r\n\r\n  // check winner\r\n  for (let i = 0; i < lines.length; i++) {\r\n    if (!squares[lines[i][0]]) {\r\n      continue;\r\n    }\r\n    let role = squares[lines[i][0]];\r\n    const res = lines[i].every((num) => {\r\n      return squares[num] === role;\r\n    });\r\n\r\n    if (res) {\r\n      return {\r\n        winner: role,\r\n        line: lines[i],\r\n      };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import { useState } from \"react\";\r\nimport Game from \"./Game\";\r\nimport \"./global.css\";\r\n\r\nfunction Window() {\r\n  const [input, setInput] = useState();\r\n  const [size, setSize] = useState();\r\n\r\n  function renderGame(_size) {\r\n    if (_size > 0) {\r\n      return <Game size={Number(_size)} />;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        className={\"input\"}\r\n        type={\"number\"}\r\n        placeholder={\"Please input size of board (nxn) ...\"}\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        required\r\n      />\r\n      <button onClick={() => setSize(input)} disabled={size} > Enter </button>\r\n      <button onClick={() => setSize(null)} disabled={!size} > Reset </button>\r\n\r\n      {renderGame(size)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Window;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Window from './Window';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Window />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}